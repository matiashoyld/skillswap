---
description: 
globs: 
alwaysApply: true
---
# Project Summary: SkillSwap (T3 Stack Base)

SkillSwap is a peer-to-peer feedback platform designed for job candidates. It allows users to request and provide feedback on job application materials like resumes, portfolios, LinkedIn profiles, cover letters, and cold emails within specific professional communities. The platform operates on a credit-based system to incentivize participation and quality feedback.

## Core Technologies

*   **Framework:** Next.js (App Router)
*   **Language:** TypeScript
*   **UI Library:** React
*   **Styling:** Tailwind CSS
*   **UI Components:** [shadcn/ui](mdc:https:/ui.shadcn.com) (e.g., Button, Card)
*   **Authentication:** Clerk
*   **Database:** Supabase (PostgreSQL)
*   **ORM:** Prisma
*   **API Layer:** tRPC (integrated with Next.js App Router)
*   **Deployment:** Vercel

## Key Files & Structure

*   **Prisma Schema:** Defines database models (e.g., `User` with specific Clerk fields `clerkUserId`, `firstName`, `lastName`, `imageUrl`, `email`). Located at [prisma/schema.prisma](mdc:prisma/schema.prisma).
*   **Global Styles & Custom CSS:** Contains Tailwind setup and custom CSS variables. Located at [src/styles/globals.css](mdc:src/styles/globals.css).
*   **Clerk Middleware:** Configures authentication rules and makes auth context available. **Located at [src/middleware.ts](mdc:src/middleware.ts)**.
*   **tRPC Setup:**
    *   Context creation, base procedures (public/protected): [src/server/api/trpc.ts](mdc:src/server/api/trpc.ts)
    *   Root application router (merges other routers): [src/server/api/root.ts](mdc:src/server/api/root.ts)
    *   Individual feature routers (e.g., user, feedback, community): `src/server/api/routers/`
*   **Authentication Pages:**
    *   Login: [src/app/auth/login/[[...sign-in]]/page.tsx](mdc:src/app/auth/login/[[...sign-in]]/page.tsx)
    *   Signup: [src/app/auth/signup/[[...sign-up]]/page.tsx](mdc:src/app/auth/signup/[[...sign-up]]/page.tsx)
*   **Clerk/Supabase Sync Webhook:** Handles `user.created`/`user.updated` events from Clerk to sync user data (including `clerkUserId`, `firstName`, `lastName`, `imageUrl`, `email`) to Supabase via Prisma. Located at [src/app/api/webhooks/clerk/route.ts](mdc:src/app/api/webhooks/clerk/route.ts).
*   **Main Dashboard:** The primary user interface after login. Uses Server Components for initial data fetching via tRPC.
    *   Page (Server Component): [src/app/dashboard/page.tsx](mdc:src/app/dashboard/page.tsx)
    *   Client Components: `src/app/dashboard/components/`
*   **Prisma Client Instance:** Defined in [src/server/db.ts](mdc:src/server/db.ts).
*   **Environment Variables:** Defined in `.env` locally and configured in Vercel project settings. Includes `DATABASE_URL`, `DIRECT_URL`, Clerk keys, and `CLERK_WEBHOOK_SECRET`. See `.env.example` for structure.

## Conventions & Patterns

*   Uses T3 Stack principles as a base (Next.js, TypeScript, Tailwind, tRPC, Prisma).
*   Data fetching primarily done in Server Components using tRPC server-side callers.
*   Client components receive initial data as props.
*   Clerk middleware (`src/middleware.ts`) provides authentication context for tRPC procedures.
*   Clerk webhooks ensure user data is synced asynchronously to the Supabase DB.
*   Database migrations managed via `prisma migrate`.
*   **Custom Colors:** Brand colors are defined in [tailwind.config.js](mdc:tailwind.config.js):
    *   `brand-primary`: `#0E3638`
    *   `brand-subtle-bg`: `#D5E8E9`
    *   `brand-dark`: `#351F0E`
*   **Development Workaround:** The `user.getCurrent` tRPC procedure ([src/server/api/routers/user.ts](mdc:src/server/api/routers/user.ts)) queries the database by `email` instead of `clerkUserId`. This is because Clerk uses different `userId` values in development vs. production, and the webhook only syncs the production ID. Querying by the consistent email allows finding users locally. Consider using `clerk webhook tunnel` or `ngrok` for local webhook testing in the future.

## Additional Learnings & Conventions (Generated from Interaction)

### Centralized Types (`[src/types/index.ts](mdc:src/types/index.ts)`)

*   This file serves as the central hub for shared TypeScript types across the frontend and backend.
*   It re-exports augmented Prisma types (e.g., `User`, `Community`) potentially adding frontend-specific fields or derived data like `memberCount`.
*   It defines frontend-friendly union types (e.g., `RequestType`, `RequestStatus`) mapped from Prisma enums using helper functions (e.g., `mapPrismaToRequestType`).
*   Component-specific data shapes derived from tRPC procedures are also defined and exported here (e.g., `MyRequestItem`, `AvailableRequestItem`, `DashboardUser`, `DashboardCommunity`) to ensure consistency and avoid `any` types in component props. **Important:** Props passed to components should match these specific derived types, reflecting the actual data selected in tRPC procedures, rather than the base Prisma types if fields are omitted.

### tRPC Procedure Details & Data Shapes

*   **Context (`[src/server/api/trpc.ts](mdc:src/server/api/trpc.ts)`):** Provides `db` (Prisma client), `auth` (Clerk auth object), `user` (Clerk user object or null), `userId` (Clerk user ID or null), and `primaryEmail` (user's primary email or null) to procedures. Protected procedures enforce the presence of `userId`. Note: `createTRPCContext` is designed to be called *without* arguments.
*   **`feedback.getMyRequests` (`[src/server/api/routers/feedback.ts](mdc:src/server/api/routers/feedback.ts)`):** Returns an array matching the `MyRequestItem` type: `{ id, type, status, createdAt, feedbackCount, context }`.
*   **`feedback.getAvailableRequests` (`[src/server/api/routers/feedback.ts](mdc:src/server/api/routers/feedback.ts)`):** Returns an array matching the `AvailableRequestItem` type: `{ id, type, status, createdAt, requester: { id, firstName, lastName }, communityId, communityName, context }`. Note that `requester` only includes minimal info.
*   **`user.getCurrent` (`[src/server/api/routers/user.ts](mdc:src/server/api/routers/user.ts)`):** Returns an object matching the `DashboardUser` type: `{ id, clerkUserId, email, firstName, lastName, imageUrl, credits, name }`. Fetches user by `primaryEmail`.
*   **`community.list` (`[src/server/api/routers/community.ts](mdc:src/server/api/routers/community.ts)`):** Returns an array of `DashboardCommunity` objects: `{ id, name, description, memberCount }`.

### Common Linting/Typing Patterns

*   Avoid using `any`. Define specific types for props and variables, often deriving them from the expected tRPC API response shapes and centralizing them in `[src/types/index.ts](mdc:src/types/index.ts)`.
*   Use `import type` for importing types when `verbatimModuleSyntax` is enabled (common in newer TypeScript/Next.js setups).
*   Clean up unused imports and variables flagged by ESLint.
*   Use HTML entities (e.g., `&apos;`, `&quot;`) for special characters within JSX text content.
*   Prefer the nullish coalescing operator (`??`) over logical OR (`||`) for providing default values when dealing with potentially `null` or `undefined` values.
*   Ensure tRPC context creation (`[src/server/api/trpc.ts](mdc:src/server/api/trpc.ts)`, `[src/trpc/server.ts](mdc:src/trpc/server.ts)`, `[src/app/api/trpc/[trpc]/route.ts](mdc:src/app/api/trpc/[trpc]/route.ts)`) matches function signatures (e.g., avoid passing arguments to `createTRPCContext` if it expects none).
