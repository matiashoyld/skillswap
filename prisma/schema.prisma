generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  credits                Int                  @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  clerkUserId            String?              @unique
  firstName              String?
  imageUrl               String?
  lastName               String?
  hasCompletedOnboarding Boolean              @default(false)
  evaluationsMade        FeedbackEvaluation[] @relation("EvaluatorEvaluations")
  requestsMade           FeedbackRequest[]    @relation("RequesterRequests")
  responsesGiven         FeedbackResponse[]   @relation("ResponderResponses")
  communities            UserCommunity[]

  @@index([email])
}

model Community {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  requests    RequestCommunity[]
  members     UserCommunity[]
}

model UserCommunity {
  userId      String
  communityId String
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
  @@index([communityId])
}

model FeedbackRequest {
  id                String                @id @default(cuid())
  requestType       FeedbackRequestType
  contentUrl        String?
  contentText       String?
  status            FeedbackRequestStatus @default(PENDING)
  requesterId       String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  context           String?
  requester         User                  @relation("RequesterRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  responses         FeedbackResponse[]
  targetCommunities RequestCommunity[]

  @@index([requesterId])
  @@index([status])
  @@index([createdAt])
}

model RequestCommunity {
  requestId   String
  communityId String
  community   Community       @relation(fields: [communityId], references: [id], onDelete: Cascade)
  request     FeedbackRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@id([requestId, communityId])
  @@index([communityId])
}

model FeedbackResponse {
  id           String              @id @default(cuid())
  feedbackText String
  requestId    String
  responderId  String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  evaluation   FeedbackEvaluation?
  request      FeedbackRequest     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  responder    User                @relation("ResponderResponses", fields: [responderId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([responderId])
}

model FeedbackEvaluation {
  id          String                   @id @default(cuid())
  rating      FeedbackEvaluationRating
  responseId  String                   @unique
  evaluatorId String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  evaluator   User                     @relation("EvaluatorEvaluations", fields: [evaluatorId], references: [id], onDelete: Cascade)
  response    FeedbackResponse         @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([evaluatorId])
}

enum FeedbackRequestType {
  LINKEDIN
  COLD_EMAIL
  RESUME
  PORTFOLIO
  COVER_LETTER
}

enum FeedbackRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum FeedbackEvaluationRating {
  SUPER_INSIGHTFUL
  HELPFUL
  OKAY
  NOT_HELPFUL
  HARMFUL
}
